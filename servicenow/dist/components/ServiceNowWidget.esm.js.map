{"version":3,"file":"ServiceNowWidget.esm.js","sources":["../../src/components/ServiceNowWidget.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  InfoCard,\n  Table,\n  TableColumn,\n  Progress,\n} from '@backstage/core-components';\nimport {\n  useApi,\n  identityApiRef,\n  discoveryApiRef,\n} from '@backstage/core-plugin-api';\nimport { useAsync } from 'react-use';\nimport { Alert } from '@material-ui/lab';\n\n// The base URL of your ServiceNow instance for creating direct links\nconst SERVICENOW_INSTANCE_URL = 'https://ven03172.service-now.com';\n\n/**\n * The shape of a single ServiceNow Incident record.\n */\nexport type Incident = {\n  sys_id: string;\n  number: string;\n  short_description: string;\n  state: string;\n  priority: string;\n  opened_at: string;\n};\n\n/**\n * The definition for the columns in our incidents table.\n */\nconst columns: TableColumn<Incident>[] = [\n  {\n    title: 'Number',\n    field: 'number',\n    width: '10%',\n    render: rowData => (\n      <a\n        href={`${SERVICENOW_INSTANCE_URL}/nav_to.do?uri=incident.do?sys_id=${rowData.sys_id}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {rowData.number}\n      </a>\n    ),\n  },\n  { title: 'Description', field: 'short_description' },\n  { title: 'State', field: 'state', width: '10%' },\n  { title: 'Priority', field: 'priority', width: '10%' },\n  { title: 'Opened At', field: 'opened_at', type: 'datetime' },\n];\n\n/**\n * The main widget component that fetches and displays ServiceNow incidents.\n */\nexport const ServiceNowWidget = () => {\n  // Get references to Backstage/Harness core APIs\n  const identityApi = useApi(identityApiRef);\n  const discoveryApi = useApi(discoveryApiRef);\n\n  const { value: incidents, loading, error } = useAsync(\n    async (): Promise<Incident[]> => {\n      // Get the authentication token first\n      const { token } = await identityApi.getCredentials();\n\n      // Dynamically get the correct base URL for the proxy service\n      const proxyBaseUrl = await discoveryApi.getBaseUrl('proxy');\n\n      // This is a static query that does not depend on an entity.\n      const query = 'active=true';\n      const fields = 'sys_id,number,short_description,state,priority,opened_at';\n      const limit = 10;\n\n      // Construct the full, correct URL dynamically\n      const url = `${proxyBaseUrl}/servicenow/api/now/table/incident?sysparm_query=${query}&sysparm_fields=${fields}&sysparm_limit=${limit}`;\n\n      // Use the standard browser fetch with the manually added Auth header\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(\n          `Failed to fetch ServiceNow incidents: ${response.status} ${response.statusText} - ${text}`,\n        );\n      }\n\n      const data = (await response.json()) as { result?: Incident[] };\n      return data.result ?? [];\n    },\n    [identityApi, discoveryApi], // Dependency array\n  );\n\n  return (\n    // The title prop has been removed from InfoCard.\n    // The parent page component will now provide the main title for the card.\n    <InfoCard>\n      {loading && <Progress />}\n      {error && <Alert severity=\"error\">{error.message}</Alert>}\n      {!loading && !error && (\n        <Table\n          // The title prop has also been removed from the Table for a cleaner look.\n          columns={columns}\n          data={incidents || []}\n          options={{ paging: false, search: false, padding: 'dense' }}\n        />\n      )}\n    </InfoCard>\n  );\n};"],"names":[],"mappings":"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"}